<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
  "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mid.mypage.mappers.CartMapper">

    <!--
        장바구니 목록 전체 조회
        - 파라미터: memNo (회원번호)
        - 반환: CartVO 리스트 (장바구니+상품 정보)
        - CART와 PRODUCT 테이블 조인, 최신순 정렬
    -->
    <select id="getCartList" resultType="com.mid.mypage.model.CartVO">
        SELECT
            c.cart_id        AS cartId,         <!-- 장바구니 PK -->
            c.mem_no         AS memNo,          <!-- 회원번호 -->
            c.product_no     AS productNo,      <!-- 상품번호 -->
            c.cart_quantity  AS cartQuantity,   <!-- 장바구니 수량 -->
            p.product_name   AS productName,    <!-- 상품명 -->
            p.product_price  AS productPrice,   <!-- 상품 단가 -->
            p.product_thum   AS productThum     <!-- 상품 썸네일 -->
        FROM
            CART c
        JOIN
            PRODUCT p ON c.product_no = p.product_no <!-- 상품 정보 조인 -->
        WHERE
            c.mem_no = #{memNo} <!-- 회원별 조회 -->
        ORDER BY
            c.cart_id DESC <!-- 최신순 정렬 -->
    </select>

    <!--
        장바구니 수량 변경
        - 파라미터: cartId(장바구니 PK), quantity(변경 수량)
        - 반환: 영향받은 row 수(int)
    -->
    <update id="updateCartQuantity">
        UPDATE CART
        SET cart_quantity = #{quantity} <!-- 새 수량으로 변경 -->
        WHERE TRIM(cart_id) = #{cartId} <!-- 해당 cartId만 -->
    </update>

    <!--
        장바구니 선택 삭제
        - 파라미터: cartIds(List<String>)
        - 반환: 삭제된 row 수(int)
        - 여러 cart_id를 한 번에 삭제
    -->
    <delete id="deleteCartByIds">
        DELETE FROM CART
        WHERE cart_id IN
        <foreach collection="list" item="cartId" open="(" separator="," close=")">
            #{cartId} <!-- 반복적으로 cartId 바인딩 -->
        </foreach>
    </delete>

    <!--
        장바구니 페이징 목록 조회
        - 파라미터: memNo, startRow, endRow (map)
        - 반환: CartVO 리스트 (해당 범위만)
        - ROW_NUMBER()로 페이징
    -->
    <select id="getCartListPaged" parameterType="map" resultType="com.mid.mypage.model.CartVO">
        SELECT * FROM (
            SELECT
                c.cart_id        AS cartId,      <!-- 장바구니 PK -->
                c.mem_no         AS memNo,       <!-- 회원번호 -->
                c.product_no     AS productNo,   <!-- 상품번호 -->
                c.cart_quantity  AS cartQuantity,<!-- 수량 -->
                p.product_name   AS productName, <!-- 상품명 -->
                p.product_price  AS productPrice,<!-- 단가 -->
                p.product_thum   AS productThum, <!-- 썸네일 -->
                ROW_NUMBER() OVER (ORDER BY c.cart_id DESC) AS rn <!-- 페이징용 rownum -->
            FROM
                CART c
            JOIN
                PRODUCT p ON c.product_no = p.product_no
            WHERE
                c.mem_no = #{memNo} <!-- 회원별 -->
        )
        WHERE rn BETWEEN #{startRow} AND #{endRow} <!-- 페이징 범위 -->
    </select>

    <!--
        장바구니 개수 조회
        - 파라미터: memNo
        - 반환: int (장바구니 항목 개수)
    -->
    <select id="getCartCount" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM CART WHERE mem_no = #{memNo}
    </select>

    <!--
        선택된 cartId 전체의 총 결제금액 계산
        - 파라미터: cartIds(List<String>)
        - 반환: int (총액)
        - 상품 단가 * 수량의 합
    -->
    <select id="getTotalPriceByCartIds" parameterType="list" resultType="int">
        SELECT COALESCE(SUM(p.product_price * c.cart_quantity), 0)
        FROM CART c
        JOIN PRODUCT p ON c.product_no = p.product_no
        WHERE c.cart_id IN
        <foreach collection="list" item="cartId" open="(" separator="," close=")">
            #{cartId}
        </foreach>
    </select>

    <!--
        장바구니 수량 증가 (중복 담기 시)
        - 파라미터: memNo, productNo, addQty
        - 반환: 영향받은 row 수(int)
    -->
    <update id="increaseCartQuantity" parameterType="map">
        UPDATE CART
        SET cart_quantity = cart_quantity + #{addQty} <!-- 기존 수량에 더함 -->
        WHERE mem_no = #{memNo} AND product_no = #{productNo} <!-- 해당 회원/상품만 -->
    </update>

    <!--
        장바구니에 새 상품 추가
        - 파라미터: cartId, memNo, productNo, quantity
        - 반환: 영향받은 row 수(int)
    -->
    <insert id="addToCart" parameterType="map">
        INSERT INTO CART (cart_id, mem_no, product_no, cart_quantity)
        VALUES (#{cartId}, #{memNo}, #{productNo}, #{quantity})
    </insert>

    <!--
        장바구니 중복 상품 존재 여부 체크
        - 파라미터: memNo, productNo
        - 반환: int (0: 없음, 1 이상: 이미 담김)
    -->
    <select id="existsCartItem" parameterType="map" resultType="int">
        SELECT COUNT(*) FROM CART WHERE mem_no = #{memNo} AND product_no = #{productNo}
    </select>

</mapper>
